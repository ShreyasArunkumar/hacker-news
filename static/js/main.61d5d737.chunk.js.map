{"version":3,"sources":["web/FormComponents/Button/index.tsx","web/FormComponents/Input/index.tsx","web/utils.tsx","web/Icons/UpArrow.tsx","web/Table/index.tsx","web/index.tsx","serviceWorker.ts","index.tsx"],"names":["Button","type","children","className","Input","name","defaultValue","setInLocalStorage","key","value","localStorage","setItem","UpArrow","width","height","viewBox","fill","xmlns","d","Table","data","onClickNext","onClickPrev","incrementVote","page","hideNews","style","map","n","index","points","num_comments","onClick","href","url","target","rel","title","URL","hostname","err","console","log","getHostName","author","formatDistanceToNow","Date","created_at","addSuffix","margin","useState","news","setNews","searchString","setSearchString","setPage","options","updateOptions","series","updateSeries","a","fetch","res","json","JSON","stringify","hits","updateCharts","response","categories","forEach","push","chart","toolbar","show","legend","grid","stroke","curve","theme","monochrome","enabled","color","yaxis","labels","formatter","text","xaxis","checkNews","getItem","getNews","parse","useEffect","queryStrings","window","location","search","urlParams","URLSearchParams","get","parseInt","onSubmit","e","preventDefault","id","newData","splice","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61d5d737.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.scss\";\n\ninterface IButton {\n  type?: \"submit\" | \"button\" | \"reset\";\n  children: any;\n}\n\nexport default function Button({ type = \"button\", children }: IButton) {\n  return (\n    <button className=\"news_feed__button\" type={type}>\n      {children}\n    </button>\n  );\n}\n","import React from \"react\";\nimport \"./index.scss\";\n\ninterface IInput {\n  type?: string;\n  name?: string;\n  className?: string;\n  defaultValue?: any;\n}\n\nexport default function Input({\n  type = \"text\",\n  name,\n  defaultValue,\n  className = \"\",\n}: IInput) {\n  return (\n    <input\n      type={type}\n      name={name}\n      defaultValue={defaultValue}\n      className={`news_feed__input ${className}`}\n    />\n  );\n}\n","// Custom function to check if the given string is present in the Local storage or not\nexport function checkInLocalStorage(key: string): null | any {\n  const value = localStorage.getItem(key);\n  return value;\n}\n\n// Custom function to update the key and value inside Local storage\nexport function setInLocalStorage(key: string, value: string) {\n  localStorage.setItem(key, value);\n}\n\n// Get the hostName from the given URL\nexport function getHostName(url: string): string | null {\n  try {\n    const newUrl = new URL(url);\n    return newUrl.hostname;\n  } catch (err) {\n    console.log(\"error on creating URL\", err);\n    return null;\n  }\n}\n","import React from \"react\";\n\nexport default function UpArrow() {\n  return (\n    <svg\n      width=\"9\"\n      height=\"6\"\n      viewBox=\"0 0 9 6\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M4.5 4.30616L0.999876 0.998597C0.913478 0.915513 0.770821 0.91749 0.682414 1.00255L0.0675816 1.59404C-0.020826 1.6791 -0.0228354 1.81758 0.0635628 1.90066L4.33725 5.94016C4.38145 5.98368 4.44173 6.00346 4.5 5.99951C4.56028 6.00148 4.61855 5.9817 4.66275 5.94016L8.93644 1.90066C9.02284 1.81758 9.02083 1.6791 8.93242 1.59404L8.31759 1.00255C8.22918 0.917491 8.08652 0.915513 8.00012 0.998598L4.5 4.30616Z\"\n        fill=\"black\"\n      />\n    </svg>\n  );\n}\n","import React from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport \"./index.scss\";\nimport { getHostName } from \"../utils\";\nimport UpArrow from \"../Icons/UpArrow\";\n\ninterface INews {\n  data: any;\n  page: number;\n  onClickNext: () => void;\n  onClickPrev: () => void;\n  incrementVote: (index: number) => void;\n  hideNews: (index: number) => void;\n}\n\nexport default function Table({\n  data,\n  onClickNext,\n  onClickPrev,\n  incrementVote,\n  page,\n  hideNews,\n}: INews) {\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th>Comments</th>\n            <th>Vote Count</th>\n            <th>Up Votes</th>\n            <th className=\"wd100\" style={{ width: \"100%\" }}>\n              News Details\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {!!data &&\n            data.map((n: any, index: number) => (\n              <tr key={n.points}>\n                <td>{n.num_comments}</td>\n                <td>{n.points}</td>\n                <td\n                  onClick={() => incrementVote(index)}\n                  className=\"pointer text-center rotate90deg\"\n                >\n                  <UpArrow />\n                </td>\n                <td>\n                  <a href={n.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {n.title}\n                  </a>\n\n                  <span className=\"news_feed__info\">\n                    <span className=\"news_feed__info_gray\">\n                      {` (${getHostName(n.url)}) by `}\n                    </span>\n\n                    <span className=\"capitalize\">{`${n.author} `}</span>\n\n                    <span className=\"news_feed__info_gray\">\n                      {formatDistanceToNow(new Date(n.created_at), {\n                        addSuffix: false,\n                      })}\n                    </span>\n\n                    <span className=\"pointer\" onClick={() => hideNews(index)}>\n                      {\" \"}\n                      [ hide ]\n                    </span>\n                  </span>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n      <div className=\"flex mt-16 justify-end\">\n        {page !== 0 && (\n          <>\n            <div\n              onClick={onClickPrev}\n              className=\"primary bold heading-3 pointer\"\n            >\n              Previous\n            </div>\n            <div\n              className=\"primary bold heading-3 pointer\"\n              style={{ margin: \"auto 10px\" }}\n            >\n              |\n            </div>\n          </>\n        )}\n        <div onClick={onClickNext} className=\"primary bold heading-3 pointer\">\n          Next\n        </div>\n      </div>\n    </>\n  );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"./FormComponents/Button\";\nimport Input from \"./FormComponents/Input\";\nimport NewsTable from \"./Table\";\nimport { checkInLocalStorage, setInLocalStorage } from \"./utils\";\nimport Chart from \"react-apexcharts\";\n\nexport interface ChartOption {\n  chart?: object;\n  stroke?: object;\n  grid?: object;\n  dataLabels?: object;\n  theme?: object;\n  fill?: object;\n  tooltip?: object;\n  labels?: object;\n  legend?: object;\n  toolbar?: object;\n  markers?: object;\n  xaxis?: object;\n  yaxis?: object;\n  title?: object;\n  colors?: object;\n  plotOptions?: object;\n}\n\nexport interface ChartData {\n  name?: string;\n  data: any;\n}\n\nexport default function index() {\n  const op: ChartOption = {};\n  const se: ChartData[] = [];\n\n  const [news, setNews] = useState<any>([]);\n  const [searchString, setSearchString] = useState(\"\");\n  const [page, setPage] = useState(0);\n\n  //chart related states\n  const [options, updateOptions] = useState(op);\n  const [series, updateSeries] = useState(se);\n\n  async function getNews() {\n    try {\n      if (searchString !== \"\") {\n        let res: any = await fetch(\n          `https://hn.algolia.com/api/v1/search?query=${searchString}&page=${page}`\n        );\n        res = await res.json();\n        // set api res to the localStorage\n        setInLocalStorage(searchString + page, JSON.stringify(res.hits));\n        setNews(res.hits);\n        updateCharts(res.hits);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  function updateCharts(response: []) {\n    let data: Array<number> = [];\n    let categories: Array<string> = [];\n\n    // deconstruct the API data to match the charts API\n    response.forEach((a: { points: number; author: string }) => {\n      data.push(a.points);\n      categories.push(a.author);\n    });\n\n    updateOptions({\n      chart: {\n        toolbar: {\n          show: false,\n        },\n      },\n      legend: {\n        show: true,\n      },\n      grid: {\n        show: true,\n      },\n      stroke: {\n        width: 3,\n        curve: \"straight\",\n      },\n      theme: {\n        monochrome: {\n          enabled: true,\n          color: \"#f06506\",\n        },\n      },\n      yaxis: {\n        labels: {\n          formatter: (a: number) => a,\n        },\n        title: {\n          text: \"Votes\",\n        },\n      },\n      xaxis: {\n        categories,\n        labels: {\n          show: true,\n        },\n        title: {\n          text: \"Authors\",\n        },\n      },\n    });\n\n    updateSeries([\n      {\n        name: \"Votes\",\n        data,\n      },\n    ]);\n  }\n\n  function checkNews() {\n    let res = checkInLocalStorage(searchString + page);\n    // check of the API is already cached in the memory or not\n    if (res === null) {\n      getNews();\n    } else {\n      res = JSON.parse(res);\n      setNews(res);\n      updateCharts(res);\n    }\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useEffect(() => {\n    // Onchange of search string or page refetch the data\n    checkNews();\n  }, [searchString, page]);\n\n  function onSubmit(e: any) {\n    e.preventDefault();\n    const value = e.target.search.value;\n    //Update URL by adding search params\n    window.location.href = `/hacker-news/?search=${value}&page=${0}`;\n    setPage(0);\n    setSearchString(value);\n  }\n\n  useEffect(() => {\n    const queryStrings = window.location.search;\n    const urlParams = new URLSearchParams(queryStrings);\n    const search: string | null = urlParams.get(\"search\");\n    const page: string | null = urlParams.get(\"page\");\n\n    // Check if url has already has any search params\n    if (search) {\n      setSearchString(search);\n    } else {\n      setSearchString(\"css\");\n    }\n\n    if (page !== null) {\n      setPage(parseInt(page));\n    }\n  }, []);\n\n  // On click next increment the pagination count\n  function onClickPrev() {\n    window.location.href = `/hacker-news/?search=${searchString}&page=${\n      page - 1\n    }`;\n  }\n\n  // On click prev decrements the pagination count\n  function onClickNext() {\n    window.location.href = `/hacker-news/?search=${searchString}&page=${\n      page + 1\n    }`;\n  }\n\n  // on clicking vote fetch the data from the storage increment the object value and save back\n  function incrementVote(id: number) {\n    const newData = news;\n    newData[id].points = news[id].points + 1;\n    setInLocalStorage(searchString + page, JSON.stringify(newData));\n    checkNews();\n  }\n\n  // on clicking hide fetch the data from the storage search and remove the object\n  function hideNews(id: number) {\n    const newData = news;\n    newData.splice(id, 1);\n    setInLocalStorage(searchString + page, JSON.stringify(newData));\n    checkNews();\n  }\n\n  return (\n    <div className=\"table_container\">\n      {/* simple heading */}\n      <div className=\"text-center heading-1 primary bold mt-16 mb-16\">\n        Hacker News\n      </div>\n\n      {/* Search for the news */}\n      <form onSubmit={onSubmit} className=\"text-right mb-16\">\n        <Input name=\"search\" defaultValue={searchString} className=\"mr-16\" />\n        <Button type=\"submit\">Search</Button>\n      </form>\n\n      {/* displaying the custom table */}\n      <NewsTable\n        data={news}\n        onClickNext={onClickNext}\n        onClickPrev={onClickPrev}\n        incrementVote={incrementVote}\n        hideNews={hideNews}\n        page={page}\n      />\n\n      {/* display the storage data analytics */}\n      <Chart\n        options={options}\n        series={series}\n        type=\"line\"\n        width={\"100%\"}\n        height={\"300px\"}\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./web\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}